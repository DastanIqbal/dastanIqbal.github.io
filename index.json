[{"title":"OpenCV Series: 2. Get Started with OpenCV and Python","date":"May 17, 2021","description":"In this post, we will play with OpenCV with python.","body":"This is a sample code that does a basic operation reading and writing image and We will learn more about NumPy and cv2?\nimport numpy as np import cv2 #Read opencv.png logo file from local img = cv2.imread(\u0026quot;opencv.png\u0026quot;) #Create Window cv2.namedWindow(\u0026quot;Logo\u0026quot;,cv2.WINDOW_NORMAL) #Show local opencv.png in window cv2.imshow(\u0026quot;Logo\u0026quot;,img) #Wait user press key eg: Esc cv2.waitKey(0) #Deep copy the opencv.png to output.png in local cv2.imwrite(\u0026quot;output.jpg\u0026quot;,img) exit() Here we are using NumPy, which is a very popular library in AI. It\u0026rsquo;s written in C and wrapped in Python for ease of use.\nWhat is NumPy NumPy is the n-dimensional array, unlike the python list. At the time of creation, we fixed the size and when we change the ndarray size. It creates a new array and deletes the original.\nNumPy used for advanced mathematical and scientific computing and Its a very fast. For more reading you can check this NumPy link\nWhat is cv2 cv2 is a openCV binding for python which provide all the openCV methods or features. Its orignally written in C/C++. In above code we have used few methods like imread namedWindow imshow waitKey imwrite these methods basically calling C/C++ method.\nTo learn more about above function you can check OpenCV documentation imshow imread imwrite\n","ref":"/blog/2021-05-17-opencv-series-2-get-started-with-opencv-and-python/"},{"title":"OpenCV Series: 1. Installing Python and OpenCV on Mac","date":"May 15, 2021","description":"Setup OpenCV and Python on MacOS","body":"In this post we will install OpenCV and Python on MacOS\nInstall XCode sudo xcodebuild -license sudo xcode-select install Install Homebrew ruby -e \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026quot; brew update #To resolve brew error git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow #To resolve brew error git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow brew update --force --quiet` Install Python3 #Installing python2 and python3 if not exist brew install python python3 #Symlink python2 and python3 brew link python brew link python3 #If python already installed then it may ask for an upgrade brew upgrade python brew upgrade python3 #Verify python installed correctly which python2 which python3 #Check python version python2 --version python3 --version Install OpenCV # Install OpenCV 3 with Python2 and Python3 bindings brew install opencv@3 #add OpenCV site-packages path to global site-packages echo /usr/local/opt/opencv@3/lib/python3.9/site-packages \u0026gt;\u0026gt; /usr/local/lib/python3.9/site-packages/opencv3.pth #In case of the path not found, update the python version in the path #if python version is Python 3.9.2 then the path should be /python3.9/ Test OpenCv python3 import cv2 print(cv2.__version__) import numpy as np print(np.__version__) Install OpenCV in Virtual Environment Install virtualenv pip install virtualenv virtualenvwrapper echo \u0026quot;VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3\u0026quot; \u0026gt;\u0026gt; ~/.bash_profile echo \u0026quot;source /usr/local/bin/virtualenvwrapper.sh\u0026quot; \u0026gt;\u0026gt; ~/.bash_profile source ~/.bash_profile Create Environment mkvirtualenv opencv-py3 -p python3 workon opencv-py3 pip install numpy ipython scipy pandas scikit-image scikit-learn matplotlib cd ~/.virtualenvs/opencv-py3/lib/python3.9/site-packages/ ln -s /usr/local/opt/opencv@3/lib/python3.9/site-packages/cv2.cpython-39m-darwin.so cv2.so deactivate Test OpenCV in virtualenv workon opencv-py3 ipython import cv2 print(cv2.__version__) import numpy as np print(np.__version__) deactivate ","ref":"/blog/2021-05-15-opencv-series-installing-python-and-opencv-on-mac/"},{"title":"How to add ktlint in Android Project","date":"April 4, 2021","description":"","body":"Writing Clean Code is an art and there are some tools that help you to achieve, among those tools my favorite is ktlint. I would suggest whenever you are setting up a new project add this tool in your template.\nHere are the steps:\nproject/build.gradle apply plugin: \u0026#34;org.jlleitschuh.gradle.ktlint\u0026#34; buildscript { repositories { ... maven { url \u0026#34;https://plugins.gradle.org/m2/\u0026#34; } } dependencies { ... //ktlint Plugin  classpath \u0026#34;org.jlleitschuh.gradle:ktlint-gradle:9.2.1\u0026#34; } } subprojects { apply plugin: \u0026#34;org.jlleitschuh.gradle.ktlint\u0026#34; ktlint { debug = true } } tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all { kotlinOptions { jvmTarget = \u0026#34;1.8\u0026#34; } } ktlint { android.set(true) // debug.set(true)  // verbose.set(true)  outputToConsole.set(true) outputColorName.set(\u0026#34;RED\u0026#34;) // additionalEditorconfigFile = file(\u0026#34;.editorconfig\u0026#34;)  reporters { customReporters { register(\u0026#34;html\u0026#34;) { fileExtension = \u0026#34;html\u0026#34; dependency = \u0026#34;me.cassiano:ktlint-html-reporter:0.2.3\u0026#34; } } } filter { exclude(\u0026#34;**/build/**\u0026#34;) include(\u0026#34;**/kotlin/**\u0026#34;) } } After syncing you can see these two task ktlintCheck and ktlintFormat in gradle window\nUse ktlint task in terminal admin ~/Project$./gradlew ktlintCheck\nThis will check format issues in code, if you it can\u0026rsquo;t format/check then you have to do manually.\nadmin ~/Project$./gradlew ktlintFormat\nThis will auto format your code, if you it can\u0026rsquo;t then you have to do manually.\nUse ktlint task in Android Studio  Open Run-\u0026gt;Edit Configuration Select your app -\u0026gt; Before launch Add Run Gradle Task by pressing + button  Chose Project or app(Project:app) level to run ktlint Enter in Task: ktlintFormat .  You can see ktlintFormat task in Before launch window\nNow whenever you press Run button, ktlintFormat will run first don\u0026rsquo;t worry it will take few milliseconds and then app will run.\nYou can see issues in ktlintFormat window, if ktlint can\u0026rsquo;t format the file then it will print the issue description along with File and line number.\n/../StringExt.kt:7:1: Wildcard import (cannot be auto-corrected) /../Models.kt:1:1: class ModelB should be declared in a file named ModelB.kt (cannot be auto-corrected) /../Models.kt:21:22: Not a valid Kotlin file (expecting a parameter declaration) (cannot be auto-corrected) /../RvAdapter.kt:29:1: Unexpected indentation (7) (it should be 8) For more info check Kotlin ktlint Plugin\nFor faq check Kotlin ktlint Plugin FAQ\n","ref":"/blog/2021-04-04-how-to-add-ktlint-in-android-project/"},{"title":"How to use Epoxy with CustomView (PART 4)","date":"September 5, 2020","description":"Simple Listing using Epoxy CustomView","body":"Like in the previous part we have seen, how simple to list items using Epoxy Databinding.\nIn this post, we gonna use CustomView to list items on RecyclerView/EpoxyRecyclerView\nListing with Epoxy CustomView is very simple like we create CustomView in Android. We just need to add annotations to define Epoxy stuff\n4. Show List using CustomView\nEpoxy CustomView: ItemCustomView\npackage com.dastnaiqbal.epoxysample.customview import android.content.Context import android.util.AttributeSet import android.widget.FrameLayout import android.widget.TextView import com.airbnb.epoxy.ModelView import com.airbnb.epoxy.TextProp import com.dastnaiqbal.epoxysample.R /** * * \u0026quot;Iqbal Ahmed\u0026quot; created on 05/09/2020 */ @ModelView(autoLayout = ModelView.Size.MATCH_WIDTH_WRAP_HEIGHT) class ItemCustomView @JvmOverloads constructor( context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0 ) : FrameLayout(context, attrs, defStyleAttr) { private val TAG = this::class.java.simpleName val textView: TextView init { val view = inflate(context, R.layout.itemcustomview, this) textView = view.findViewById(R.id.tv) } @TextProp fun setText(charSequence: CharSequence) { textView.text = charSequence } } As you can see in the above code, we haven\u0026rsquo;t done any fancy stuff, it\u0026rsquo;s a simple custom view, we create in Android.\nThe only thing we did for Epoxy is added annotation @ModelView and @TextProp. @ModelView generates EpoxyModel class which we can use in the Controller to set data. @TextProp generates few setText methods which will accept CharSequence, @StringRes, or Editable. same as TextView.setText().\nLayout itemcustomview.xml\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; xmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot; xmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot;\u0026gt; \u0026lt;TextView android:id=\u0026quot;@+id/tv\u0026quot; android:layout_width=\u0026quot;0dp\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:layout_marginStart=\u0026quot;16dp\u0026quot; android:layout_marginEnd=\u0026quot;16dp\u0026quot; android:padding=\u0026quot;8dp\u0026quot; app:layout_constraintEnd_toEndOf=\u0026quot;parent\u0026quot; app:layout_constraintStart_toStartOf=\u0026quot;parent\u0026quot; app:layout_constraintTop_toTopOf=\u0026quot;parent\u0026quot; tools:text=\u0026quot;TextView\u0026quot; /\u0026gt; \u0026lt;/androidx.constraintlayout.widget.ConstraintLayout\u0026gt; Now we just have to implement ItemCustomViewController to set all the data on EpoxyRecyclerView/RecyclerView, ItemCustomViewController is same like SimpleDatabindingController or SimpleViewHolderController\nController ItemCustomViewController\npackage com.dastnaiqbal.epoxysample.customview import com.airbnb.epoxy.TypedEpoxyController /** * * \u0026quot;Iqbal Ahmed\u0026quot; created on 05/09/2020 */ class ItemCustomViewController : TypedEpoxyController\u0026lt;List\u0026lt;String\u0026gt;\u0026gt;() { private val TAG = this::class.java.simpleName override fun buildModels(data: List\u0026lt;String\u0026gt;?) { data?.forEachIndexed { index, s -\u0026gt; itemCustomView { id(index) text(s) } } } } As you can it\u0026rsquo;s the same like other controllers which we have defined for databinding and viewholder, the only thing we can notice here is itemCustomView{} block\nSo we have defined our layout, our controller, now we just need to attach in RecyclerView\nMainActivity.kt\npackage com.dastnaiqbal.epoxysample import android.os.Bundle import androidx.appcompat.app.AppCompatActivity import com.dastnaiqbal.epoxysample.customview.ItemCustomViewController import com.dastnaiqbal.epoxysample.databinding.SimpleDataBindingController import com.dastnaiqbal.epoxysample.dataclass.SimpleDataController import com.dastnaiqbal.epoxysample.viewholder.SimpleViewHolderController import kotlinx.android.synthetic.main.activity_main.* /** * * \u0026quot;Iqbal Ahmed\u0026quot; created on 22/08/2020 */ class MainActivity : AppCompatActivity() { private val dataClassController by lazy { SimpleDataController() } private val viewHolderController by lazy { SimpleViewHolderController() } private val dataBindingController by lazy { SimpleDataBindingController() } private val customViewController by lazy { ItemCustomViewController() } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) /** * Listing using Data Clas */ // rv.adapter = dataClassController.adapter // dataClassController.setData(ArrayList\u0026lt;String\u0026gt;().apply { // repeat(10) { // add(\u0026quot;Item Data Class #$it\u0026quot;) // } // }) /** * Listing using ViewHolder */ // rv.adapter = viewHolderController.adapter // viewHolderController.setData(ArrayList\u0026lt;String\u0026gt;().apply { // repeat(10) { // add(\u0026quot;Item View Holder #$it\u0026quot;) // } // }) /** * Listing using Databinding */ // rv.adapter = dataBindingController.adapter // dataBindingController.setData(ArrayList\u0026lt;String\u0026gt;().apply { // repeat(10) { // add(\u0026quot;Item Databinding #$it\u0026quot;) // } // }) /** * Listing using CustomView */ rv.adapter = customViewController.adapter customViewController.setData(ArrayList\u0026lt;String\u0026gt;().apply { repeat(10) { add(\u0026quot;Item CustomView #$it\u0026quot;) } }) } } Congratulations You populated your list in Epoxy using CustomView as EpoxyModel.\nIn this post, we used Epoxy CustomView and Simple Controller,\nIn the Next post, we gonna use Pagination and we will see how pagination works in Epoxy?\nSourceCode Link: https://github.com/DastanIqbal/EpoxySample/tree/epoxy/customview\nHappy Coding !!\n","ref":"/blog/2020-09-05-how-to-use-epoxy-with-customview-part-4/"},{"title":"Convert icomoon.io Font  to Android icons.xml ","date":"August 16, 2020","description":"","body":"We had the requirement to use icomoon.io font file. but we had the concerned when we update font file, its changed icon hexcode. and we wanted to use those hexcode everywhere in our project.\nWe have written mapping strings xml file in which we were using demo.html file and using icon name as our key and hexcode as our value, but when we update icon name, icon name remain same but hexcode change. so We have written this script to generate icons.xml file. so We don\u0026rsquo;t have to map each icon hexcode manually.\ndemo.html file generate when we select icon and press on Generate Font. Please take a look here\nInstall this dependency to run python script\npip3 install bs4 lxml\nPython Scripticons.py\nimport sys from bs4 import BeautifulSoup as bs separator = \u0026#34;=\u0026#34; file = open(\u0026#34;icons.xml\u0026#34;,\u0026#39;w\u0026#39;) file.write(\u0026#39;\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\\n\u0026#39;) file.write(\u0026#39;\u0026lt;resources\u0026gt;\\n\u0026#39;) with open(sys.argv[1],\u0026#39;r\u0026#39;) as f: contents = f.read() soup = bs(contents, \u0026#39;lxml\u0026#39;) ls = soup.find_all(\u0026#34;div\u0026#34;,{\u0026#34;class\u0026#34;:\u0026#34;glyph fs1\u0026#34;}) for en in ls: iconName = en.find(\u0026#34;span\u0026#34;,{\u0026#34;class\u0026#34;:\u0026#34;mls\u0026#34;}).text.strip().replace(\u0026#34;-\u0026#34;,\u0026#34;_\u0026#34;) iconCode = en.find(\u0026#34;input\u0026#34;,{\u0026#34;class\u0026#34;:\u0026#34;unit size1of2\u0026#34;})[\u0026#34;value\u0026#34;].strip() file.write(f\u0026#34;\u0026#34;\u0026#34;\\t\u0026lt;string name=\u0026#34;{iconName}\u0026#34; translatable=\u0026#34;false\u0026#34;\u0026gt;\\\\u{iconCode}\u0026lt;/string\u0026gt;\\n\u0026#34;\u0026#34;\u0026#34;) file.write(\u0026#39;\u0026lt;/resources\u0026gt;\u0026#39;) file.close To Run\npython3 icons.py demo.html\nHappy Coding!!\n","ref":"/blog/2020-08-16-convert-icomoon-io-font-to-android-icons-xml/"},{"title":"How to use Epoxy with Databinding (PART 3)","date":"June 28, 2020","description":"Simple Listing using Epoxy Databinding","body":"Like in previous Part we have seen how simple to list item using Epoxy ViewHolder.\nIn this post, we gonna use Databinding to list items on RecyclerView/EpoxyRecyclerView\nListing with Epoxy databinding is bit different, like in android we do databinding by defining \u0026lt;data\u0026gt;\u0026lt;/data\u0026gt; block or using BindingAdapter. In Epoxy we use these features directly and we don\u0026rsquo;t write any extra class to handle all these functions.\n3. Show List using Databinding\nEnable databinding in build.gradle and epoxy-databinding dependencies\nandroid { \\\\ ... dataBinding { enabled = true } } dependencies { def epoxyVersion = \u0026quot;3.11.0\u0026quot; implementation \u0026quot;com.airbnb.android:epoxy:$epoxyVersion\u0026quot; //Databinding implementation \u0026quot;com.airbnb.android:epoxy-databinding:$epoxyVersion\u0026quot; kapt \u0026quot;com.airbnb.android:epoxy-processor:$epoxyVersion\u0026quot; } We need to add this package-info.java file also to generate code for all epoxy databinding layout\npackage-info.java\n@EpoxyDataBindingPattern(rClass = R.class, layoutPrefix = \u0026quot;epoxy\u0026quot;) package com.dastnaiqbal.epoxysample; import com.airbnb.epoxy.EpoxyDataBindingPattern; Like class name explaining @EpoxyDataBindingPattern , we have to define the name pattern like layoutPrefix = \u0026quot;epoxy\u0026quot; for epoxy databinding, to seperate it out with other layouts. all the layout which start with \u0026quot;epoxy\u0026quot; for eg epoxy_databinding.xml , Epoxy processor autogenerates all the code for these layouts.\nLayout epoxy_databinding.xml\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;layout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; xmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot; xmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot;\u0026gt; \u0026lt;data\u0026gt; \u0026lt;variable name=\u0026quot;title\u0026quot; type=\u0026quot;java.lang.String\u0026quot; /\u0026gt; \u0026lt;/data\u0026gt; \u0026lt;androidx.constraintlayout.widget.ConstraintLayout android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot;\u0026gt; \u0026lt;TextView android:id=\u0026quot;@+id/tv\u0026quot; android:layout_width=\u0026quot;0dp\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:layout_marginStart=\u0026quot;16dp\u0026quot; android:layout_marginEnd=\u0026quot;16dp\u0026quot; android:padding=\u0026quot;8dp\u0026quot; android:text=\u0026quot;@{title}\u0026quot; app:layout_constraintEnd_toEndOf=\u0026quot;parent\u0026quot; app:layout_constraintStart_toStartOf=\u0026quot;parent\u0026quot; app:layout_constraintTop_toTopOf=\u0026quot;parent\u0026quot; tools:text=\u0026quot;TextView\u0026quot; /\u0026gt; \u0026lt;/androidx.constraintlayout.widget.ConstraintLayout\u0026gt; \u0026lt;/layout\u0026gt; As you can see it\u0026rsquo;s same like android databinding no other epoxy stuff.\nNow we just have to implement SimpleDatabindingController to set all the data on EpoxyRecyclerView/RecyclerView, SimpleDatabindingController is same like SimpleDataController or SimpleViewHolderController\nController SimpleDatabindingController\nclass SimpleDataBindingController : TypedEpoxyController\u0026lt;List\u0026lt;String\u0026gt;\u0026gt;() { private val TAG = this::class.java.simpleName override fun buildModels(data: List\u0026lt;String\u0026gt;?) { data?.forEachIndexed { index, str -\u0026gt; databinding { //This is your layout name after prefix \u0026quot;epoxy_databinding\u0026quot; id(index) title(str) } } } } As you can its same like other controllers which we have defined for viewholder and dataclass, the only thing we can notice here is databinding{} block, don\u0026rsquo;t confuse with Android databinding, it\u0026rsquo;s a layout name epoxy_databinding.xml ,\nBlock name generates whatever comes after layoutPrefix (\u0026quot;epoxy\u0026quot;), which we have defined in package-info.java. and block name generates in camelCase if multiple underscores(_) in layout name for eg epoxy_my_databinding.xml then block name will be myDatabinding{}\nSo we have defined our layout, our controller now we just need to attach in RecyclerView\nMainActivity.kt\npackage com.dastnaiqbal.epoxysample import android.os.Bundle import androidx.appcompat.app.AppCompatActivity import com.dastnaiqbal.epoxysample.databinding.SimpleDataBindingController import com.dastnaiqbal.epoxysample.dataclass.SimpleDataController import com.dastnaiqbal.epoxysample.viewholder.SimpleViewHolderController import kotlinx.android.synthetic.main.activity_main.* /** * * \u0026quot;Iqbal Ahmed\u0026quot; created on 22/08/2020 */ class MainActivity : AppCompatActivity() { private val dataClassController by lazy { SimpleDataController() } private val viewHolderController by lazy { SimpleViewHolderController() } private val dataBindingController by lazy { SimpleDataBindingController() } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) /** * Listing using Data Clas */ // rv.adapter = dataClassController.adapter // dataClassController.setData(ArrayList\u0026lt;String\u0026gt;().apply { // repeat(10) { // add(\u0026quot;Item Data Class #$it\u0026quot;) // } // }) /** * Listing using ViewHolder */ // rv.adapter = viewHolderController.adapter // viewHolderController.setData(ArrayList\u0026lt;String\u0026gt;().apply { // repeat(10) { // add(\u0026quot;Item View Holder #$it\u0026quot;) // } // }) /** * Listing using Databinding */ rv.adapter = dataBindingController.adapter dataBindingController.setData(ArrayList\u0026lt;String\u0026gt;().apply { repeat(10) { add(\u0026quot;Item Databinding #$it\u0026quot;) } }) } } Congratulations You populated your list in Epoxy using Databinding.\nIn this post, we used Kotlin Databinding that autogenerate EpoxyModel for databinding and Simple Controller,\nIn the Next post, we gonna use CustomView as an Epoxy Model and Instead of creating a separate adapter, we gonna use extension method to populate data on Epoxy RecyclerView.\nSourceCode Link: https://github.com/DastanIqbal/EpoxySample/tree/epoxy/databinding\nHappy Coding !!\n","ref":"/blog/2020-08-28-how-to-use-epoxy-with-databinding-part-3/"},{"title":"How to use Epoxy with ViewHolder (Part 2)","date":"June 27, 2020","description":"Simple Listing using Epoxy ViewHolder ","body":"Like in previous part we have seen how simple to list item using data class.\nIn this post, we gonna use View Holder to list items on RecyclerView/EpoxyRecyclerView\nListing with ViewHolder is similar like Recycler.ViewHolder but in Epoxy we extend to EpoxyModelWithHolder\n2. Show List using ViewHolder\nHere we need a helper class KotlinEpoxyHolder that we can get from epoxy sample or from our source code.\npackage com.dastnaiqbal.epoxysample.helper import android.view.View import com.airbnb.epoxy.EpoxyHolder import kotlin.properties.ReadOnlyProperty import kotlin.reflect.KProperty /** * A pattern for easier view binding with an [EpoxyHolder] * * Se https://github.com/airbnb/epoxy/blob/2.19.0/kotlinsample/src/main/java/com/airbnb/epoxy/kotlinsample/helpers/KotlinEpoxyHolder.kt */ abstract class KotlinEpoxyHolder : EpoxyHolder() { private lateinit var view: View override fun bindView(itemView: View) { view = itemView } protected fun \u0026lt;V : View\u0026gt; bind(id: Int): ReadOnlyProperty\u0026lt;KotlinEpoxyHolder, V\u0026gt; = Lazy { holder: KotlinEpoxyHolder, prop -\u0026gt; holder.view.findViewById(id) as V? ?: throw IllegalStateException(\u0026#34;View ID $id for \u0026#39;${prop.name}\u0026#39; not found.\u0026#34;) } /** * Taken from Kotterknife. * https://github.com/JakeWharton/kotterknife */ private class Lazy\u0026lt;V\u0026gt;( private val initializer: (KotlinEpoxyHolder, KProperty\u0026lt;*\u0026gt;) -\u0026gt; V ) : ReadOnlyProperty\u0026lt;KotlinEpoxyHolder, V\u0026gt; { private object EMPTY private var value: Any? = EMPTY override fun getValue(thisRef: KotlinEpoxyHolder, property: KProperty\u0026lt;*\u0026gt;): V { if (value == EMPTY) { value = initializer(thisRef, property) } @Suppress(\u0026#34;UNCHECKED_CAST\u0026#34;) return value as V } } } Once we add helper class then we just need to extend our ItemVH class to KotlinEpoxyHolder and define our binding ui which we want to access\nLayout itemdataclass.xml\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; xmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot; xmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot;\u0026gt; \u0026lt;TextView android:id=\u0026quot;@+id/tv\u0026quot; android:layout_width=\u0026quot;0dp\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:layout_marginStart=\u0026quot;16dp\u0026quot; android:layout_marginEnd=\u0026quot;16dp\u0026quot; app:layout_constraintEnd_toEndOf=\u0026quot;parent\u0026quot; app:layout_constraintStart_toStartOf=\u0026quot;parent\u0026quot; app:layout_constraintTop_toTopOf=\u0026quot;parent\u0026quot; tools:text=\u0026quot;TextView\u0026quot; /\u0026gt; \u0026lt;/androidx.constraintlayout.widget.ConstraintLayout\u0026gt; So like we are using existing itemdataclass.xml layout, and In that we only have one textview where we want to show our text. so ItemVH binding class will be like this\nclass ItemVH : KotlinEpoxyHolder() { val tv by bind\u0026lt;TextView\u0026gt;(R.id.tv) } To define layout for ViewHolder we use annotation @EpoxyModelClass and our ItemViewHolder class will be extend to EpoxyModelWithHolder. and we just define our UI stuff which we want to bind or we want to show on our UI using @EpoxyAttribute annotation, so If we see we are not directly binding list item. instead we have created our own title variable to set values\n@EpoxyModelClass(layout = R.layout.itemdataclass) abstract class ItemViewHolder : EpoxyModelWithHolder\u0026lt;ItemVH\u0026gt;() { private val TAG = this::class.java.simpleName @EpoxyAttribute lateinit var title: String override fun bind(view: ItemVH) { super.bind(view) view.tv.text = title } } Once our ItemViewHolder class ready then we can directly use it in Controller. Creating controller, it\u0026rsquo;s same like previous example\nEpoxy Controller: SimpleViewHolderController.kt\nclass SimpleViewHolderController : TypedEpoxyController\u0026lt;List\u0026lt;String\u0026gt;\u0026gt;() { override fun buildModels(data: List\u0026lt;String\u0026gt;?) { data?.forEachIndexed { index, s -\u0026gt; itemViewHolder { id(index) title(s) } } } } And the last step to attach controller in Epoxy Recyclerview\nMainActivity.kt\npackage com.dastnaiqbal.epoxysample import android.os.Bundle import androidx.appcompat.app.AppCompatActivity import com.dastnaiqbal.epoxysample.dataclass.SimpleDataController import com.dastnaiqbal.epoxysample.viewholder.SimpleViewHolderController import kotlinx.android.synthetic.main.activity_main.* /** * * \u0026quot;Iqbal Ahmed\u0026quot; created on 22/08/2020 */ class MainActivity : AppCompatActivity() { private val dataClassController by lazy { SimpleDataController() } private val viewHolderController by lazy { SimpleViewHolderController() } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) /** * Listing using Data Clas */ // rv.adapter = dataClassController.adapter // dataClassController.setData(ArrayList\u0026lt;String\u0026gt;().apply { // repeat(10) { // add(\u0026quot;Item Data Class #$it\u0026quot;) // } // }) /** * Listing using ViewHolder */ rv.adapter = viewHolderController.adapter viewHolderController.setData(ArrayList\u0026lt;String\u0026gt;().apply { repeat(10) { add(\u0026quot;Item View Holder #$it\u0026quot;) } }) } } Congratulations You populated your list in Epoxy using ViewHolder\nIn this post, we used Kotlin ViewHolder as an Epoxy Model and Simple Controller,\nIn the Next post, we gonna use Databinding as an Epoxy Model and Instead of creating a separate adapter, we gonna use extension method to populate data on Epoxy RecyclerView.\nSourceCode Link: https://github.com/DastanIqbal/EpoxySample/tree/epoxy/viewholder\nHappy Coding !!\n","ref":"/blog/2020-08-22-airbnb-epoxy-with-viewholder/"},{"title":"How to use Epoxy in Android (Part 1)","date":"June 26, 2020","description":"How to populate a simple list in Epoxy?","body":"Like automation is evolving in a different sector. how it\u0026rsquo;s evolving in Android. As we know about autogenerated code where we use a bunch of annotations and its auto write code for you with the help of kapt and annotationProcessor We know many plugins which write boilerplate code for you For eg Dagger.\nSame we are moving to declarative programming like JetPack Compose and Litho. The same Airbnb changes the way to show the list by using Epoxy. Indeed its a very robust library.\nIn this post, I am gonna show How can we populate a simple list using Epoxy. In Epoxy, we got 2 core concepts Models and Controllers. Model can be your CustomView, Databinding(XML), Data Class, or ViewHolder. It\u0026rsquo;s only responsibility to set data or handle CTA. Controller responsibility populate data on the list with the help of Model. Lets jump to coding\nBefore starting, Add these dependencies in build.gradle\nbuildscript { repositories { mavenCentral() } dependencies { //.... classpath 'com.jakewharton:butterknife-gradle-plugin:10.2.0' } } and these dependencies inapp/build.gradle\ndependencies { //... def epoxyVersion=\u0026quot;3.11.0\u0026quot; implementation \u0026quot;com.airbnb.android:epoxy:$epoxyVersion\u0026quot; kapt \u0026quot;com.airbnb.android:epoxy-processor:$epoxyVersion\u0026quot; } Let\u0026rsquo;s try the Simple Example of Model and Controller\n1. Show List using Data Class\nHere we need a helper class KotlinModel that we can get from epoxy sample or from our source code.\nabstract class KotlinModel( @LayoutRes private val layoutRes: Int ) : EpoxyModel\u0026lt;View\u0026gt;() { private var view: View? = null abstract fun bind() override fun bind(view: View) { this.view = view bind() } override fun unbind(view: View) { this.view = null } override fun getDefaultLayout() = layoutRes protected fun \u0026lt;V : View\u0026gt; bind(@IdRes id: Int) = object : ReadOnlyProperty\u0026lt;KotlinModel, V\u0026gt; { override fun getValue(thisRef: KotlinModel, property: KProperty\u0026lt;*\u0026gt;): V { // This is not efficient because it looks up the view by id every time (it loses // the pattern of a \u0026quot;holder\u0026quot; to cache that look up). But it is simple to use and could // be optimized with a map @Suppress(\u0026quot;UNCHECKED_CAST\u0026quot;) return view?.findViewById(id) as V? ?: throw IllegalStateException(\u0026quot;View ID $id for '${property.name}' not found.\u0026quot;) } } } Once we add helper class then we just need to extend our data class and define our layout and all magic happens when we compile our code.\nLayout itemdataclass.xml\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; xmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot; xmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot;\u0026gt; \u0026lt;TextView android:id=\u0026quot;@+id/tv\u0026quot; android:layout_width=\u0026quot;0dp\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:layout_marginStart=\u0026quot;16dp\u0026quot; android:layout_marginEnd=\u0026quot;16dp\u0026quot; app:layout_constraintEnd_toEndOf=\u0026quot;parent\u0026quot; app:layout_constraintStart_toStartOf=\u0026quot;parent\u0026quot; app:layout_constraintTop_toTopOf=\u0026quot;parent\u0026quot; tools:text=\u0026quot;TextView\u0026quot; /\u0026gt; \u0026lt;/androidx.constraintlayout.widget.ConstraintLayout\u0026gt; Epoxy Model: ItemDataClass.kt\nclass ItemDataClass(val text: String) : KotlinModel(R.layout.itemdataclass) { val tv by bind\u0026lt;TextView\u0026gt;(R.id.tv) override fun bind() { tv.text = text tv.setOnClickListener { ViewUtils.showToast(it.context, text) } } } Once our data class ready then we can directly use it in Controller. Creating controller, it\u0026rsquo;s very simple\nEpoxy Controller: SimpleDataController.kt\nclass SimpleDataController : TypedEpoxyController\u0026lt;List\u0026lt;String\u0026gt;\u0026gt;() { private val TAG = this::class.java.simpleName override fun buildModels(data: List\u0026lt;String\u0026gt;?) { data?.forEachIndexed { index, str -\u0026gt; ItemDataClass(str).id(index).addTo(this) } } } Here we have used TypedEpoxyController which is single Type controller, but if you have multiple types which you want to pass in the controller then you can use other classes Typed2EpoxyController, Typed3EpoxyController, and Typed4EpoxyController\nAnd the last step to attach controller in Epoxy Recyclerview\nLayout: activity_main.xml\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;FrameLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; xmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot;\u0026gt; \u0026lt;com.airbnb.epoxy.EpoxyRecyclerView android:id=\u0026quot;@+id/rv\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot; tools:itemCount=\u0026quot;10\u0026quot; tools:listitem=\u0026quot;@layout/itemdataclass\u0026quot; /\u0026gt; \u0026lt;/FrameLayout\u0026gt; And MainActivity.kt\nclass MainActivity : AppCompatActivity() { val controller by lazy { SimpleDataController() } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) //Step 1: Set Adapter rv.adapter = controller.adapter //Step 2: Set Controller controller.setData(ArrayList\u0026lt;String\u0026gt;().apply { repeat(10) { add(\u0026quot;Item #$it\u0026quot;) } }) } } Congratulations You populated your first list in Epoxy using Dataclass\nIn this post, we used Kotlin Data Class as an Epoxy Model and Simple Controller,\nIn the Next post, we gonna use ViewHolder as an Epoxy Model and Instead of creating a separate controller, we gonna use an extension method to populate data on Epoxy RecyclerView.\nSourceCode Link: https://github.com/DastanIqbal/EpoxySample/tree/epoxy/dataclass\nHappy Coding !!\n","ref":"/blog/2020-06-26-how-to-use-epoxy-in-android-part-1/"},{"title":"About","date":"February 28, 2019","description":"I develop ANDROID Apps along with BACKEND and MY only love is KOTLIN","body":"Still figuring out About \u0026hellip;\n","ref":"/about/"},{"title":"Contact","date":"January 1, 0001","description":"","body":"","ref":"/contact/"}]
[{
    "title": "How to use Epoxy in Android (Part 1)",
    "date": "June 26, 2020",
    "description": "How to populate a simple list in Epoxy?",
    "body": "Like automation is evolving in a different sector. how it\u0026rsquo;s evolving in Android. As we know about autogenerated code where we use a bunch of annotations and its auto write code for you with the help of kapt and annotationProcessor We know many plugins which write boilerplate code for you For eg Dagger.\nSame we are moving to declarative programming like JetPack Compose and Litho. The same Airbnb changes the way to show the list by using Epoxy. Indeed its a very robust library.\nIn this post, I am gonna show How can we populate a simple list using Epoxy. In Epoxy, we got 2 core concepts Models and Controllers. Model can be your CustomView, Databinding(XML), Data Class, or ViewHolder. It\u0026rsquo;s only responsibility to set data or handle CTA. Controller responsibility populate data on the list with the help of Model. Lets jump to coding\nBefore starting, Add these dependencies in build.gradle\nbuildscript { repositories { mavenCentral() } dependencies { //.... classpath 'com.jakewharton:butterknife-gradle-plugin:10.2.0' } } and these dependencies inapp/build.gradle\ndependencies { //... def epoxyVersion=\u0026quot;3.11.0\u0026quot; implementation \u0026quot;com.airbnb.android:epoxy:$epoxyVersion\u0026quot; kapt \u0026quot;com.airbnb.android:epoxy-processor:$epoxyVersion\u0026quot; } Let\u0026rsquo;s try the Simple Example of Model and Controller\n1. Show List using Data Class\nHere we need a helper class KotlinModel that we can get from epoxy sample or from our source code.\nabstract class KotlinModel( @LayoutRes private val layoutRes: Int ) : EpoxyModel\u0026lt;View\u0026gt;() { private var view: View? = null abstract fun bind() override fun bind(view: View) { this.view = view bind() } override fun unbind(view: View) { this.view = null } override fun getDefaultLayout() = layoutRes protected fun \u0026lt;V : View\u0026gt; bind(@IdRes id: Int) = object : ReadOnlyProperty\u0026lt;KotlinModel, V\u0026gt; { override fun getValue(thisRef: KotlinModel, property: KProperty\u0026lt;*\u0026gt;): V { // This is not efficient because it looks up the view by id every time (it loses // the pattern of a \u0026quot;holder\u0026quot; to cache that look up). But it is simple to use and could // be optimized with a map @Suppress(\u0026quot;UNCHECKED_CAST\u0026quot;) return view?.findViewById(id) as V? ?: throw IllegalStateException(\u0026quot;View ID $id for '${property.name}' not found.\u0026quot;) } } } Once we add helper class then we just need to extend our data class and define our layout and all magic happens when we compile our code.\nLayout itemdataclass.xml\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; xmlns:app=\u0026quot;http://schemas.android.com/apk/res-auto\u0026quot; xmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot;\u0026gt; \u0026lt;TextView android:id=\u0026quot;@+id/tv\u0026quot; android:layout_width=\u0026quot;0dp\u0026quot; android:layout_height=\u0026quot;wrap_content\u0026quot; android:layout_marginStart=\u0026quot;16dp\u0026quot; android:layout_marginEnd=\u0026quot;16dp\u0026quot; app:layout_constraintEnd_toEndOf=\u0026quot;parent\u0026quot; app:layout_constraintStart_toStartOf=\u0026quot;parent\u0026quot; app:layout_constraintTop_toTopOf=\u0026quot;parent\u0026quot; tools:text=\u0026quot;TextView\u0026quot; /\u0026gt; \u0026lt;/androidx.constraintlayout.widget.ConstraintLayout\u0026gt; Epoxy Model: ItemDataClass.kt\nclass ItemDataClass(val text: String) : KotlinModel(R.layout.itemdataclass) { val tv by bind\u0026lt;TextView\u0026gt;(R.id.tv) override fun bind() { tv.text = text tv.setOnClickListener { ViewUtils.showToast(it.context, text) } } } Once our data class ready then we can directly use it in Controller. Creating controller, it\u0026rsquo;s very simple\nEpoxy Controller: SimpleDataController.kt\nclass SimpleDataController : TypedEpoxyController\u0026lt;List\u0026lt;String\u0026gt;\u0026gt;() { private val TAG = this::class.java.simpleName override fun buildModels(data: List\u0026lt;String\u0026gt;?) { data?.forEachIndexed { index, str -\u0026gt; ItemDataClass(str).id(index).addTo(this) } } } Here we have used TypedEpoxyController which is single Type controller, but if you have multiple types which you want to pass in the controller then you can use other classes Typed2EpoxyController, Typed3EpoxyController, and Typed4EpoxyController\nAnd the last step to attach controller in Epoxy Recyclerview\nLayout: activity_main.xml\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;FrameLayout xmlns:android=\u0026quot;http://schemas.android.com/apk/res/android\u0026quot; xmlns:tools=\u0026quot;http://schemas.android.com/tools\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot;\u0026gt; \u0026lt;com.airbnb.epoxy.EpoxyRecyclerView android:id=\u0026quot;@+id/rv\u0026quot; android:layout_width=\u0026quot;match_parent\u0026quot; android:layout_height=\u0026quot;match_parent\u0026quot; tools:itemCount=\u0026quot;10\u0026quot; tools:listitem=\u0026quot;@layout/itemdataclass\u0026quot; /\u0026gt; \u0026lt;/FrameLayout\u0026gt; And MainActivity.kt\nclass MainActivity : AppCompatActivity() { val controller by lazy { SimpleDataController() } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) //Step 1: Set Adapter rv.adapter = controller.adapter //Step 2: Set Controller controller.setData(ArrayList\u0026lt;String\u0026gt;().apply { repeat(10) { add(\u0026quot;Item #$it\u0026quot;) } }) } } Congratulations You populate your first list in Epoxy.\nIn this post, we used Kotlin Data Class as an Epoxy Model and Simple Controller, In the Next post, we gonna use databinding as an Epoxy Model and Instead of creating a separate controller, we gonna use extension to populate data on Epoxy RecyclerView.\nSourceCode Link: https://github.com/DastanIqbal/EpoxySample/tree/epoxy/dataclass\nHappy Coding !!\n",
    "ref": "/blog/2020-06-26-how-to-use-epoxy-in-android-part-1/"
  },{
    "title": "About",
    "date": "February 28, 2019",
    "description": "I develop ANDROID Apps along with BACKEND and MY only love is KOTLIN",
    "body": "Still figuring out About\u0026hellip;\n",
    "ref": "/about/"
  },{
    "title": "Contact",
    "date": "January 1, 0001",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
